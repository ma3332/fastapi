# FastAPI

1. Create env folder: py -3 -m venv venv
2. (select interpreter) Crtl + Shift + P: select venv/Scripts/python.exe
3. cmd: venv/Scripts/activate.bat
4. pip install fastapi[all] (Run 3 commands above before installing fastapi)
5. cmd run server: uvicorn main:app --reload
6. Create a python package (name: app)
7. cmd run server (new): uvicorn app.main_DB_ORM:app --reload 
8. pip freeze : check all installed libraries

# PostgresSQL

Some Features: Primary Key, Unique, Not Null
Run and Config PgAdmin
1. some SQL query:
add more products: INSERT INTO products (name, price, inventory) values ('condom gum', 3, 2000), ('condom bubble', 3, 1500), ('laptop', 150, 15) RETURNING *;
update 1 product id: UPDATE products SET name ='condom mint', price = 4 WHERE id = 15 RETURNING *; (return all field of that id)
delete products: DELETE FROM products WHERE id = 12;
2. Setup Relationship in SQL by adding "Foreign key" in "Constraints" feature of Table Property 
3. Primary Key in 1 Column: Primary Key
4. Primary Key in 2 Columns: Composite Key (Voting example, 1 user id can only vote once for each post)
5. Join-tables (Like what OLAP from excel did):
    - SELECT * FROM <table_1> LEFT JOIN <table_2> ON <table_1>.column_1 = <table_2>.column_2;
    - ex1: SELECT * FROM posts LEFT JOIN users ON posts.user_id = users.id;
    - ex2: SELECT posts.id, users.email FROM posts LEFT JOIN users ON posts.user_id = users.id; // specifying id of "posts" instead of "users"
    - ex2.1: SELECT posts.*, users.email FROM posts LEFT JOIN users ON posts.user_id = users.id; // select all fields of posts table
    - ex3: SELECT user.id, COUNT (*) FROM posts LEFT JOIN users ON posts.user_id = users.id GROUP BY user.id; // null post is also counted
    - ex4: SELECT user.id, COUNT (post.id) FROM posts LEFT JOIN users ON posts.user_id = users.id GROUP BY user.id; // null post is not counted
    - Conclusion: the step is: 1st: join table, 2nd: select type of join (LEFT OUTER, LEFT INNER ...), 3rd: group_by, 4th: COUNT

# psycopg (This library will help us to connect to our DB PostgresSQL)

pip install psycopg2
instruction: https://www.psycopg.org/docs/usage.html

# Object Relational Mapper (ORM) (SQLALCHEMY)

No need to work with SQL anymore, FastAPI will talk to ORM and ORM talk to SQL
No need psycopg2
-> SQLALCHEMY: standalone library, <pip install SQLALCHEMY>
SQLALCHEMY don't handle table migration. So if the name of table is already created, if we make any change in the models, the table wont change accordingly
-> hence we need to delete the table and update the main_DB_ORM file again
Setup Steps:
1. create the database.py (like the sample)
2. create models.py for the table name, columns and their corresponding properties
3. create the main_DB_ORM file (remember to import all necessary libraries)
4. create schema.py for specifying the format of post from users as well as corresponding response from api to user
5. some note about ORM
    - query command: db.query(models.PostForm)
    - 1st result from query command: db.query(models.PostForm).filter(models.PostForm.id == id).first()
    - all result from query command: db.query(models.PostForm).filter(models.PostForm.id == id).all()
DRAWBACK of ORM: CANNOT PERFORM SQL MIGRATION 

# DB migration (Alembic) - this will automatically work with SQLALCHEMY

Allow to incrememtally track changes to DB and rollback changes to any point in time
1.1, pip install alembic
1.2, alembic init alembic
1.3, env.py add those lines in appropriate location:
    - from app.models import Base    // import Base from models so that alembic can know about table structure
    - from app.config import setting // import config file from app so that we can add .env parameters
    - target_metadata = Base.metadata // this helps alembic automatically update models to our PostgreSQL (pgAdmin)
    - config.set_main_option("sqlalchemy.url", f"postgresql+psycopg2://{setting.database_username}:{setting.database_password}@{setting.database_host}:{setting.database_port}/{setting.database_name}")
    // this will replace "sqlalchemy.url" variable in "alembic.ini" file with our url
1.4, alembic revision -m "create posts table" // create new version
1.5, alembic upgrade head or alembic upgrade <verion sequel> // update lastest version or chosen version
1.6, As we "from app.models import Base", we can also run:
    - alembic revision --autogenerate -m "name" // this will update what has been declared in the models to PostGreSQL

# Hashing customers password
pip install passlib[bcrypt]

# JWT Token: this is stored in user front-end, used for API Authentication
JWT Token includes 3 fields: Header, Body and hash of (Header + Body + Secret API Key)
Header: includes metadata of the token JWT
Body: includes token payload, normally can be user_id and corresponding roles
The Header and Body is available to others, which can be read and written on
Secret API Key is used to make sure the correct Authentication for corresponding users

ref: https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/
-> pip install python-jose[cryptography]
JWT Token will be added into Headers or Authorization (Bearer Token) of Postman 

# Prepare for git
1. create .gitignore file
2. pip freeze > requirements.txt 
3. others can install those libraries by typing "pip install -r requirements.txt"
